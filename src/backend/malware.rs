use std::collections::HashMap;
use std::hash::{Hash, Hasher};
use std::sync::atomic::{AtomicUsize, Ordering};

use super::signal::{SignalLevel, YELLOW_SIGNAL_LEVEL};
use super::mathphysics::{Megahertz, Millisecond, PowerUnit};


pub type MalwareId = usize;
pub type MalwareToStateMap = HashMap<Malware, InfectionState>;


pub const JAMMING_SIGNAL_LEVEL: SignalLevel = YELLOW_SIGNAL_LEVEL;


static FREE_MALWARE_ID: AtomicUsize = AtomicUsize::new(1);


fn generate_malware_id() -> MalwareId {
    FREE_MALWARE_ID.fetch_add(1, Ordering::SeqCst)
}


#[derive(Debug, Clone, Copy)]
pub enum InfectionState {
    Vulnerable,
    Infected,
    Patched
}


#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
pub enum MalwareType { 
    DoS(PowerUnit),
    Indicator,
    Jamming(Megahertz),
}


// TODO handle reinfection
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
pub struct Malware {
    id: MalwareId,
    infection_delay: Millisecond,
    malware_type: MalwareType,
    spreads: bool,
}

impl Malware {
    #[must_use]
    pub fn new(
        infection_delay: Millisecond,
        malware_type: MalwareType,
        spreads: bool,
    ) -> Self {
        Self {
            id: generate_malware_id(),
            infection_delay,
            malware_type,
            spreads,
        }
    }
    
    #[must_use]
    pub fn id(&self) -> MalwareId {
        self.id
    }

    #[must_use]
    pub fn infection_delay(&self) -> Millisecond {
        self.infection_delay
    }

    #[must_use]
    pub fn malware_type(&self) -> &MalwareType {
        &self.malware_type
    }

    #[must_use]
    pub fn spreads(&self) -> bool {
        self.spreads
    }
}

impl Hash for Malware {
    fn hash<H: Hasher>(&self, state: &mut H) {
        self.id.hash(state);
    }
}


#[cfg(test)]
mod tests {
    use super::*;


    #[test]
    fn same_malware_ids_on_clone() {
        let malware = Malware::new(
            0, 
            MalwareType::Indicator, 
            false
        );
        let cloned_malware = malware.clone();

        assert_eq!(malware.id(), cloned_malware.id())
    }
}
