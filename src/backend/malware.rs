use std::collections::HashMap;

use super::signal::{SignalLevel, YELLOW_SIGNAL_LEVEL};
use super::mathphysics::{Megahertz, Millisecond, PowerUnit};


pub type MalwareToStateMap = HashMap<Malware, InfectionState>;


pub const JAMMING_SIGNAL_LEVEL: SignalLevel = YELLOW_SIGNAL_LEVEL;


#[derive(Debug, Clone, Copy)]
pub enum InfectionState {
    Vulnerable,
    Infected,
    Patched
}


#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
pub enum MalwareType { 
    DoS(PowerUnit),
    Indicator,
    Jamming(Megahertz),
}


#[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]
pub struct Malware {
    infection_delay: Millisecond,
    malware_type: MalwareType,
    spreads: bool,
}

impl Malware {
    #[must_use]
    pub fn new(
        infection_delay: Millisecond,
        malware_type: MalwareType,
        spreads: bool,
    ) -> Self {
        Self {
            infection_delay,
            malware_type,
            spreads,
        }
    }
    
    #[must_use]
    pub fn infection_delay(&self) -> Millisecond {
        self.infection_delay
    }

    #[must_use]
    pub fn malware_type(&self) -> &MalwareType {
        &self.malware_type
    }

    #[must_use]
    pub fn spreads(&self) -> bool {
        self.spreads
    }
}
